var We = Object.defineProperty;
var Ue = (s, e, t) => e in s ? We(s, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : s[e] = t;
var c = (s, e, t) => (Ue(s, typeof e != "symbol" ? e + "" : e, t), t);
function oe(s, e) {
  let t;
  const n = () => {
    t !== void 0 && e && e(t), t = void 0;
  };
  return [() => t === void 0 ? t = s(n) : t, n];
}
function ae(s) {
  const e = M(), { count: t } = e;
  e.unsubscribe(s), t && !e.count && it();
}
function He(s) {
  return M().subscribe(s), () => ae(s);
}
class Oe {
  constructor(e, t = {}) {
    this.scope = e, this.options = t;
  }
  /**
   * Prints message into a console in case, logger is currently enabled.
   * @param level - log level.
   * @param args - arguments.
   */
  print(e, ...t) {
    const n = /* @__PURE__ */ new Date(), r = Intl.DateTimeFormat("en-GB", {
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit",
      fractionalSecondDigits: 3,
      timeZone: "UTC"
    }).format(n), { textColor: i, bgColor: o } = this.options, a = "font-weight: bold;padding: 0 5px;border-radius:5px";
    console[e](
      `%c${r}%c / %c${this.scope}`,
      `${a};background-color: lightblue;color:black`,
      "",
      `${a};${i ? `color:${i};` : ""}${o ? `background-color:${o}` : ""}`,
      ...t
    );
  }
  /**
   * Prints error message into a console.
   * @param args
   */
  error(...e) {
    this.print("error", ...e);
  }
  /**
   * Prints log message into a console.
   * @param args
   */
  log(...e) {
    this.print("log", ...e);
  }
}
const F = new Oe("SDK", {
  bgColor: "forestgreen",
  textColor: "white"
});
let O = !1;
const se = ({ name: s, payload: e }) => {
  F.log("Event received:", e ? { name: s, payload: e } : { name: s });
};
function Kt(s) {
  O !== s && (O = s, s ? He(se) : ae(se));
}
function Ge(...s) {
  O && F.log(...s);
}
class R {
  constructor() {
    c(this, "listeners", /* @__PURE__ */ new Map());
    c(this, "listenersCount", 0);
    c(this, "subscribeListeners", []);
  }
  /**
   * Removes all event listeners.
   */
  clear() {
    this.listeners.clear(), this.subscribeListeners = [];
  }
  /**
   * Returns count of bound listeners.
   */
  get count() {
    return this.listenersCount + this.subscribeListeners.length;
  }
  emit(e, ...t) {
    this.subscribeListeners.forEach((r) => r({
      event: e,
      args: t
    })), (this.listeners.get(e) || []).forEach(([r, i]) => {
      r(...t), i && this.off(e, r);
    });
  }
  /**
   * Adds new event listener.
   * @param event - event name.
   * @param listener - event listener.
   * @param once - should listener be called only once.
   * @returns Function to remove bound event listener.
   */
  on(e, t, n) {
    let r = this.listeners.get(e);
    return r || this.listeners.set(e, r = []), r.push([t, n]), this.listenersCount += 1, () => this.off(e, t);
  }
  /**
   * Removes event listener. In case, specified listener was bound several times, it removes
   * only a single one.
   * @param event - event name.
   * @param listener - event listener.
   */
  off(e, t) {
    const n = this.listeners.get(e) || [];
    for (let r = 0; r < n.length; r += 1)
      if (t === n[r][0]) {
        n.splice(r, 1), this.listenersCount -= 1;
        return;
      }
  }
  /**
   * Adds a new event listener for all events.
   * @param listener - event listener.
   * @returns Function to remove event listener.
   */
  subscribe(e) {
    return this.subscribeListeners.push(e), () => this.unsubscribe(e);
  }
  /**
   * Removes global event listener. In case, specified listener was bound several times, it removes
   * only a single one.
   * @param listener - event listener.
   */
  unsubscribe(e) {
    for (let t = 0; t < this.subscribeListeners.length; t += 1)
      if (this.subscribeListeners[t] === e) {
        this.subscribeListeners.splice(t, 1);
        return;
      }
  }
}
function G(s, e, t) {
  return window.addEventListener(s, e, t), () => window.removeEventListener(s, e, t);
}
function J(...s) {
  let e = !1;
  const t = s.flat(1);
  return [
    (n) => !e && t.push(n),
    () => {
      e || (e = !0, t.forEach((n) => n()));
    },
    e
  ];
}
class V extends Error {
  constructor(e, t, n) {
    super(t, { cause: n }), this.type = e, Object.setPrototypeOf(this, V.prototype);
  }
}
function f(s, e, t) {
  return new V(s, e, t);
}
const je = "ERR_METHOD_UNSUPPORTED", ze = "ERR_METHOD_PARAMETER_UNSUPPORTED", Fe = "ERR_UNKNOWN_ENV", Je = "ERR_INVOKE_CUSTOM_METHOD_RESPONSE", Qe = "ERR_TIMED_OUT", Ye = "ERR_UNEXPECTED_TYPE", ce = "ERR_PARSE", Ze = "ERR_NAVIGATION_LIST_EMPTY", Ke = "ERR_NAVIGATION_CURSOR_INVALID", Xt = "ERR_NAVIGATION_ITEM_INVALID", es = "ERR_SSR_INIT", Xe = "ERR_INVALID_PATH_BASE";
function E() {
  return f(Ye, "Value has unexpected type");
}
class D {
  constructor(e, t, n) {
    this.parser = e, this.isOptional = t, this.type = n;
  }
  /**
   * Attempts to parse passed value
   * @param value - value to parse.
   * @throws {SDKError} ERR_PARSE
   * @see ERR_PARSE
   */
  parse(e) {
    if (!(this.isOptional && e === void 0))
      try {
        return this.parser(e);
      } catch (t) {
        throw f(
          ce,
          `Unable to parse value${this.type ? ` as ${this.type}` : ""}`,
          t
        );
      }
  }
  optional() {
    return this.isOptional = !0, this;
  }
}
function S(s, e) {
  return () => new D(s, !1, e);
}
const b = S((s) => {
  if (typeof s == "boolean")
    return s;
  const e = String(s);
  if (e === "1" || e === "true")
    return !0;
  if (e === "0" || e === "false")
    return !1;
  throw E();
}, "boolean");
function pe(s, e) {
  const t = {};
  for (const n in s) {
    const r = s[n];
    if (!r)
      continue;
    let i, o;
    if (typeof r == "function" || "parse" in r)
      i = n, o = typeof r == "function" ? r : r.parse.bind(r);
    else {
      const { type: a } = r;
      i = r.from || n, o = typeof a == "function" ? a : a.parse.bind(a);
    }
    try {
      const a = o(e(i));
      a !== void 0 && (t[n] = a);
    } catch (a) {
      throw f(ce, `Unable to parse field "${n}"`, a);
    }
  }
  return t;
}
function he(s) {
  let e = s;
  if (typeof e == "string" && (e = JSON.parse(e)), typeof e != "object" || e === null || Array.isArray(e))
    throw E();
  return e;
}
function g(s, e) {
  return new D((t) => {
    const n = he(t);
    return pe(s, (r) => n[r]);
  }, !1, e);
}
const y = S((s) => {
  if (typeof s == "number")
    return s;
  if (typeof s == "string") {
    const e = Number(s);
    if (!Number.isNaN(e))
      return e;
  }
  throw E();
}, "number"), h = S((s) => {
  if (typeof s == "string" || typeof s == "number")
    return s.toString();
  throw E();
}, "string");
function ue(s) {
  return g({
    eventType: h(),
    eventData: (e) => e
  }).parse(s);
}
function et() {
  ["TelegramGameProxy_receiveEvent", "TelegramGameProxy", "Telegram"].forEach((s) => {
    delete window[s];
  });
}
function j(s, e) {
  window.dispatchEvent(new MessageEvent("message", {
    data: JSON.stringify({ eventType: s, eventData: e }),
    // We specify window.parent to imitate the case, the parent iframe sent us this event.
    source: window.parent
  }));
}
function tt() {
  [
    ["TelegramGameProxy_receiveEvent"],
    // Windows Phone.
    ["TelegramGameProxy", "receiveEvent"],
    // Desktop.
    ["Telegram", "WebView", "receiveEvent"]
    // Android and iOS.
  ].forEach((s) => {
    let e = window;
    s.forEach((t, n, r) => {
      if (n === r.length - 1) {
        e[t] = j;
        return;
      }
      t in e || (e[t] = {}), e = e[t];
    });
  });
}
const st = {
  clipboard_text_received: g({
    req_id: h(),
    data: (s) => s === null ? s : h().optional().parse(s)
  }),
  custom_method_invoked: g({
    req_id: h(),
    result: (s) => s,
    error: h().optional()
  }),
  popup_closed: {
    parse(s) {
      return g({
        button_id: (e) => e == null ? void 0 : h().parse(e)
      }).parse(s ?? {});
    }
  },
  viewport_changed: g({
    height: y(),
    width: (s) => s == null ? window.innerWidth : y().parse(s),
    is_state_stable: b(),
    is_expanded: b()
  })
};
function nt() {
  const s = new R(), e = new R();
  e.subscribe((n) => {
    s.emit("event", { name: n.event, payload: n.args[0] });
  }), tt();
  const [, t] = J(
    // Don't forget to remove created handlers.
    et,
    // Add "resize" event listener to make sure, we always have fresh viewport information.
    // Desktop version of Telegram is sometimes not sending the viewport_changed
    // event. For example, when the MainButton is shown. That's why we should
    // add our own listener to make sure, viewport information is always fresh.
    // Issue: https://github.com/Telegram-Mini-Apps/telegram-apps/issues/10
    G("resize", () => {
      e.emit("viewport_changed", {
        width: window.innerWidth,
        height: window.innerHeight,
        is_state_stable: !0,
        is_expanded: !0
      });
    }),
    // Add listener, which handles events sent from the Telegram web application and also events
    // generated by the local emitEvent function.
    G("message", (n) => {
      if (n.source !== window.parent)
        return;
      let r;
      try {
        r = ue(n.data);
      } catch {
        return;
      }
      const { eventType: i, eventData: o } = r, a = st[i];
      try {
        const p = a ? a.parse(o) : o;
        e.emit(...p ? [i, p] : [i]);
      } catch (p) {
        F.error(
          `An error occurred processing the "${i}" event from the Telegram application.
Please, file an issue here:
https://github.com/Telegram-Mini-Apps/telegram-apps/issues/new/choose`,
          r,
          p
        );
      }
    }),
    // Clear emitters.
    () => s.clear(),
    () => e.clear()
  );
  return [{
    on: e.on.bind(e),
    off: e.off.bind(e),
    subscribe(n) {
      return s.on("event", n);
    },
    unsubscribe(n) {
      s.off("event", n);
    },
    get count() {
      return e.count + s.count;
    }
  }, t];
}
const [rt, it] = oe(
  (s) => {
    const [e, t] = nt(), n = e.off.bind(e);
    return e.off = (r, i) => {
      const { count: o } = e;
      n(r, i), o && !e.count && s();
    }, [e, t];
  },
  ([, s]) => s()
);
function M() {
  return rt()[0];
}
function B(s, e) {
  M().off(s, e);
}
function w(s, e, t) {
  return M().on(s, e, t);
}
function k(s) {
  return typeof s == "object" && s !== null && !Array.isArray(s);
}
function ot(s, e) {
  const t = s.split("."), n = e.split("."), r = Math.max(t.length, n.length);
  for (let i = 0; i < r; i += 1) {
    const o = parseInt(t[i] || "0", 10), a = parseInt(n[i] || "0", 10);
    if (o !== a)
      return o > a ? 1 : -1;
  }
  return 0;
}
function _(s, e) {
  return ot(s, e) <= 0;
}
function v(s, e, t) {
  if (typeof t == "string") {
    if (s === "web_app_open_link") {
      if (e === "try_instant_view")
        return _("6.4", t);
      if (e === "try_browser")
        return _("7.6", t);
    }
    if (s === "web_app_set_header_color" && e === "color")
      return _("6.9", t);
    if (s === "web_app_close" && e === "return_back")
      return _("7.6", t);
  }
  switch (s) {
    case "web_app_open_tg_link":
    case "web_app_open_invoice":
    case "web_app_setup_back_button":
    case "web_app_set_background_color":
    case "web_app_set_header_color":
    case "web_app_trigger_haptic_feedback":
      return _("6.1", e);
    case "web_app_open_popup":
      return _("6.2", e);
    case "web_app_close_scan_qr_popup":
    case "web_app_open_scan_qr_popup":
    case "web_app_read_text_from_clipboard":
      return _("6.4", e);
    case "web_app_switch_inline_query":
      return _("6.7", e);
    case "web_app_invoke_custom_method":
    case "web_app_request_write_access":
    case "web_app_request_phone":
      return _("6.9", e);
    case "web_app_setup_settings_button":
      return _("6.10", e);
    case "web_app_biometry_get_info":
    case "web_app_biometry_open_settings":
    case "web_app_biometry_request_access":
    case "web_app_biometry_request_auth":
    case "web_app_biometry_update_token":
      return _("7.2", e);
    case "web_app_setup_swipe_behavior":
      return _("7.7", e);
    default:
      return [
        "iframe_ready",
        "iframe_will_reload",
        "web_app_close",
        "web_app_data_send",
        "web_app_expand",
        "web_app_open_link",
        "web_app_ready",
        "web_app_request_theme",
        "web_app_request_viewport",
        "web_app_setup_main_button",
        "web_app_setup_closing_behavior"
      ].includes(s);
  }
}
function le(s) {
  return "external" in s && k(s.external) && "notify" in s.external && typeof s.external.notify == "function";
}
function de(s) {
  return "TelegramWebviewProxy" in s && k(s.TelegramWebviewProxy) && "postEvent" in s.TelegramWebviewProxy && typeof s.TelegramWebviewProxy.postEvent == "function";
}
function _e() {
  try {
    return window.self !== window.top;
  } catch {
    return !0;
  }
}
const at = "https://web.telegram.org";
let fe = at;
function ts(s) {
  fe = s;
}
function ct() {
  return fe;
}
function A(s, e, t) {
  let n = {}, r;
  if (!e && !t ? n = {} : e && t ? (n = t, r = e) : e && ("targetOrigin" in e ? n = e : r = e), Ge("Posting event:", r ? { event: s, data: r } : { event: s }), _e())
    return window.parent.postMessage(
      JSON.stringify({ eventType: s, eventData: r }),
      n.targetOrigin || ct()
    );
  if (le(window)) {
    window.external.notify(JSON.stringify({ eventType: s, eventData: r }));
    return;
  }
  if (de(window)) {
    window.TelegramWebviewProxy.postEvent(s, JSON.stringify(r));
    return;
  }
  throw f(
    Fe,
    "Unable to determine current environment and possible way to send event. You are probably trying to use Mini Apps method outside the Telegram application environment."
  );
}
function pt(s) {
  return (e, t) => {
    if (!v(e, s))
      throw f(je, `Method "${e}" is unsupported in Mini Apps version ${s}`);
    if (k(t) && e === "web_app_set_header_color" && "color" in t && !v(e, "color", s))
      throw f(
        ze,
        `Parameter "color" of "${e}" method is unsupported in Mini Apps version ${s}`
      );
    return A(e, t);
  };
}
function ge(s) {
  return ({ req_id: e }) => e === s;
}
function we(s) {
  return f(Qe, `Timeout reached: ${s}ms`);
}
function be(s, e) {
  return Promise.race([
    typeof s == "function" ? s() : s,
    new Promise((t, n) => {
      setTimeout(() => {
        n(we(e));
      }, e);
    })
  ]);
}
async function d(s) {
  let e;
  const t = new Promise((a) => e = a), { event: n, capture: r, timeout: i } = s, [, o] = J(
    // We need to iterate over all tracked events, and create their event listeners.
    (Array.isArray(n) ? n : [n]).map((a) => w(a, (p) => {
      (!r || (Array.isArray(n) ? r({
        event: a,
        payload: p
      }) : r(p))) && e(p);
    }))
  );
  try {
    return (s.postEvent || A)(s.method, s.params), await (i ? be(t, i) : t);
  } finally {
    o();
  }
}
async function C(s, e, t, n = {}) {
  const {
    result: r,
    error: i
  } = await d({
    ...n,
    method: "web_app_invoke_custom_method",
    event: "custom_method_invoked",
    params: {
      method: s,
      params: e,
      req_id: t
    },
    capture: ge(t)
  });
  if (i)
    throw f(Je, i);
  return r;
}
function z(...s) {
  return s.map((e) => {
    if (typeof e == "string")
      return e;
    if (k(e))
      return z(Object.entries(e).map((t) => t[1] && t[0]));
    if (Array.isArray(e))
      return z(...e);
  }).filter(Boolean).join(" ");
}
function ss(...s) {
  return s.reduce((e, t) => (k(t) && Object.entries(t).forEach(([n, r]) => {
    const i = z(e[n], r);
    i.length && (e[n] = i);
  }), e), {});
}
function Q(s) {
  return /^#[\da-f]{6}$/i.test(s);
}
function ht(s) {
  return /^#[\da-f]{3}$/i.test(s);
}
function me(s) {
  const e = s.replace(/\s/g, "").toLowerCase();
  if (Q(e))
    return e;
  if (ht(e)) {
    let n = "#";
    for (let r = 0; r < 3; r += 1)
      n += e[1 + r].repeat(2);
    return n;
  }
  const t = e.match(/^rgb\((\d{1,3}),(\d{1,3}),(\d{1,3})\)$/) || e.match(/^rgba\((\d{1,3}),(\d{1,3}),(\d{1,3}),\d{1,3}\)$/);
  if (!t)
    throw new Error(`Value "${s}" does not satisfy any of known RGB formats.`);
  return t.slice(1).reduce((n, r) => {
    const i = parseInt(r, 10).toString(16);
    return n + (i.length === 1 ? "0" : "") + i;
  }, "#");
}
function ye(s) {
  const e = me(s);
  return Math.sqrt(
    [0.299, 0.587, 0.114].reduce((t, n, r) => {
      const i = parseInt(e.slice(1 + r * 2, 1 + (r + 1) * 2), 16);
      return t + i * i * n;
    }, 0)
  ) < 120;
}
class ut {
  constructor(e) {
    c(this, "ee", new R());
    /**
     * Adds new event listener.
     */
    c(this, "on", this.ee.on.bind(this.ee));
    /**
     * Removes event listener.
     */
    c(this, "off", this.ee.off.bind(this.ee));
    this.state = e;
  }
  /**
   * Clones current state and returns its copy.
   */
  clone() {
    return { ...this.state };
  }
  set(e, t) {
    Object.entries(typeof e == "string" ? { [e]: t } : e).reduce((r, [i, o]) => this.state[i] === o || o === void 0 ? r : (this.state[i] = o, this.ee.emit(`change:${i}`, o), !0), !1) && this.ee.emit("change", this.state);
  }
  /**
   * Returns value by specified key.
   * @param key - state key.
   */
  get(e) {
    return this.state[e];
  }
}
class Y {
  constructor(e) {
    c(this, "state");
    /**
     * Gets the state value.
     */
    c(this, "get");
    /**
     * Sets the state value.
     */
    c(this, "set");
    /**
     * Clones the current state.
     */
    c(this, "clone");
    this.state = new ut(e), this.set = this.state.set.bind(this.state), this.get = this.state.get.bind(this.state), this.clone = this.state.clone.bind(this.state);
  }
}
function ve(s, e) {
  return (t) => v(e[t], s);
}
class Z extends Y {
  constructor(t, n, r) {
    super(t);
    /**
     * @returns True, if specified method is supported by the current component.
     */
    c(this, "supports");
    this.supports = ve(n, r);
  }
}
class lt extends Z {
  constructor(t, n, r) {
    super({ isVisible: t }, n, {
      show: "web_app_setup_back_button",
      hide: "web_app_setup_back_button"
    });
    /**
     * Adds a new event listener.
     * @param event - event to listen.
     * @param listener - listener to add.
     */
    c(this, "on", (t, n) => t === "click" ? w("back_button_pressed", n) : this.state.on(t, n));
    /**
     * Removes the event listener.
     * @param event - event to listen.
     * @param listener - listener to remove.
     */
    c(this, "off", (t, n) => t === "click" ? B("back_button_pressed", n) : this.state.off(t, n));
    this.postEvent = r;
  }
  set isVisible(t) {
    this.set("isVisible", t), this.postEvent("web_app_setup_back_button", { is_visible: t });
  }
  /**
   * True if BackButton is currently visible.
   */
  get isVisible() {
    return this.get("isVisible");
  }
  /**
   * Hides the BackButton.
   */
  hide() {
    this.isVisible = !1;
  }
  /**
   * Shows the BackButton.
   */
  show() {
    this.isVisible = !0;
  }
}
const Ee = S((s) => s instanceof Date ? s : new Date(y().parse(s) * 1e3), "Date");
function K(s, e) {
  return new D((t) => {
    if (typeof t != "string" && !(t instanceof URLSearchParams))
      throw E();
    const n = typeof t == "string" ? new URLSearchParams(t) : t;
    return pe(s, (r) => {
      const i = n.get(r);
      return i === null ? void 0 : i;
    });
  }, !1, e);
}
const dt = g({
  id: y(),
  type: h(),
  title: h(),
  photoUrl: {
    type: h().optional(),
    from: "photo_url"
  },
  username: h().optional()
}, "Chat").optional(), ne = g({
  addedToAttachmentMenu: {
    type: b().optional(),
    from: "added_to_attachment_menu"
  },
  allowsWriteToPm: {
    type: b().optional(),
    from: "allows_write_to_pm"
  },
  firstName: {
    type: h(),
    from: "first_name"
  },
  id: y(),
  isBot: {
    type: b().optional(),
    from: "is_bot"
  },
  isPremium: {
    type: b().optional(),
    from: "is_premium"
  },
  languageCode: {
    type: h().optional(),
    from: "language_code"
  },
  lastName: {
    type: h().optional(),
    from: "last_name"
  },
  photoUrl: {
    type: h().optional(),
    from: "photo_url"
  },
  username: h().optional()
}, "User").optional();
function Se() {
  return K({
    authDate: {
      type: Ee(),
      from: "auth_date"
    },
    canSendAfter: {
      type: y().optional(),
      from: "can_send_after"
    },
    chat: dt,
    chatInstance: {
      type: h().optional(),
      from: "chat_instance"
    },
    chatType: {
      type: h().optional(),
      from: "chat_type"
    },
    hash: h(),
    queryId: {
      type: h().optional(),
      from: "query_id"
    },
    receiver: ne,
    startParam: {
      type: h().optional(),
      from: "start_param"
    },
    user: ne
  }, "InitData");
}
const _t = S((s) => me(h().parse(s)), "rgb");
function ft(s) {
  return s.replace(/_[a-z]/g, (e) => e[1].toUpperCase());
}
function gt(s) {
  return s.replace(/[A-Z]/g, (e) => `_${e.toLowerCase()}`);
}
const Pe = S(
  (s) => {
    const e = _t().optional();
    return Object.entries(he(s)).reduce((t, [n, r]) => (t[ft(n)] = e.parse(r), t), {});
  },
  "ThemeParams"
);
function X(s) {
  return K({
    botInline: {
      type: b().optional(),
      from: "tgWebAppBotInline"
    },
    initData: {
      type: Se().optional(),
      from: "tgWebAppData"
    },
    initDataRaw: {
      type: h().optional(),
      from: "tgWebAppData"
    },
    platform: {
      type: h(),
      from: "tgWebAppPlatform"
    },
    showSettings: {
      type: b().optional(),
      from: "tgWebAppShowSettings"
    },
    startParam: {
      type: h().optional(),
      from: "tgWebAppStartParam"
    },
    themeParams: {
      type: Pe(),
      from: "tgWebAppThemeParams"
    },
    version: {
      type: h(),
      from: "tgWebAppVersion"
    }
  }).parse(s);
}
function xe(s) {
  return X(
    s.replace(/^[^?#]*[?#]/, "").replace(/[?#]/g, "&")
  );
}
function wt() {
  return xe(window.location.href);
}
function Ce() {
  return performance.getEntriesByType("navigation")[0];
}
function bt() {
  const s = Ce();
  if (!s)
    throw new Error("Unable to get first navigation entry.");
  return xe(s.name);
}
function Te(s) {
  return `telegram-apps/${s.replace(/[A-Z]/g, (e) => `-${e.toLowerCase()}`)}`;
}
function Re(s, e) {
  sessionStorage.setItem(Te(s), JSON.stringify(e));
}
function Ae(s) {
  const e = sessionStorage.getItem(Te(s));
  try {
    return e ? JSON.parse(e) : void 0;
  } catch {
  }
}
function mt() {
  return X(Ae("launchParams") || "");
}
function Ie(s) {
  return JSON.stringify(
    Object.fromEntries(
      Object.entries(s).map(([e, t]) => [gt(e), t])
    )
  );
}
function yt(s) {
  const {
    initDataRaw: e,
    themeParams: t,
    platform: n,
    version: r,
    showSettings: i,
    startParam: o,
    botInline: a
  } = s, p = new URLSearchParams();
  return p.set("tgWebAppPlatform", n), p.set("tgWebAppThemeParams", Ie(t)), p.set("tgWebAppVersion", r), e && p.set("tgWebAppData", e), o && p.set("tgWebAppStartParam", o), typeof i == "boolean" && p.set("tgWebAppShowSettings", i ? "1" : "0"), typeof a == "boolean" && p.set("tgWebAppBotInline", a ? "1" : "0"), p.toString();
}
function qe(s) {
  Re("launchParams", yt(s));
}
function vt() {
  const s = [];
  for (const e of [
    // Try to retrieve launch parameters from the current location. This method can return
    // nothing in case, location was changed, and then the page was reloaded.
    wt,
    // Then, try using the lower level API - window.performance.
    bt,
    // Finally, try to extract launch parameters from the session storage.
    mt
  ])
    try {
      const t = e();
      return qe(t), t;
    } catch (t) {
      s.push(t instanceof Error ? t.message : JSON.stringify(t));
    }
  throw new Error([
    `Unable to retrieve launch parameters from any known source. Perhaps, you have opened your app outside Telegram?
`,
    "📖 Refer to docs for more information:",
    `https://docs.telegram-mini-apps.com/packages/telegram-apps-sdk/environment
`,
    "Collected errors:",
    s.map((e) => `— ${e}`)
  ].join(`
`));
}
function ke() {
  const s = Ce();
  return !!(s && s.type === "reload");
}
function Et() {
  let s = 0;
  return () => (s += 1).toString();
}
const [St] = oe(Et);
function l(s, e) {
  return () => {
    const t = vt(), n = {
      ...t,
      postEvent: pt(t.version),
      createRequestId: St()
    };
    if (typeof s == "function")
      return s(n);
    const [r, i, o] = J(), a = e({
      ...n,
      // State should only be passed only in case, current page was reloaded. If we don't add
      // this check, state restoration will work improperly in the web version of Telegram,
      // when we are always working in the same "session" (tab).
      state: ke() ? Ae(s) : void 0,
      addCleanup: r
    }), p = (u) => (o || r(
      u.on("change", ($e) => {
        Re(s, $e);
      })
    ), u);
    return [
      a instanceof Promise ? a.then(p) : p(a),
      i
    ];
  };
}
const ns = l("backButton", ({
  postEvent: s,
  version: e,
  state: t = { isVisible: !1 }
}) => new lt(t.isVisible, e, s));
class P extends Z {
  constructor() {
    super(...arguments);
    /**
     * Adds a new event listener.
     */
    c(this, "on", this.state.on.bind(this.state));
    /**
     * Removes the event listener.
     */
    c(this, "off", this.state.off.bind(this.state));
  }
}
function Ne(s) {
  const e = s.available ? s : {
    available: !1,
    device_id: "",
    token_saved: !1,
    access_requested: !1,
    access_granted: !1,
    type: ""
  };
  return {
    available: !0,
    type: e.type,
    deviceId: e.device_id,
    tokenSaved: e.token_saved,
    accessRequested: e.access_requested,
    accessGranted: e.access_granted
  };
}
class Pt extends P {
  constructor({ postEvent: t, version: n, ...r }) {
    super(r, n, {
      auth: "web_app_biometry_request_auth",
      openSettings: "web_app_biometry_open_settings",
      requestAccess: "web_app_biometry_request_access",
      updateToken: "web_app_biometry_update_token"
    });
    c(this, "postEvent");
    c(this, "authPromise");
    c(this, "accessPromise");
    this.postEvent = t;
  }
  /**
   * Shows whether biometry is available.
   */
  get available() {
    return this.get("available");
  }
  /**
   * Shows whether permission to use biometrics has been granted.
   */
  get accessGranted() {
    return this.get("accessGranted");
  }
  /**
   * Shows whether if permission to use biometrics has been requested.
   */
  get accessRequested() {
    return this.get("accessRequested");
  }
  /**
   * Authenticates the user using biometrics.
   * @param options - method options.
   * @since 7.2
   * @returns Token from the local secure storage, if authentication was successful.
   */
  async authenticate({
    reason: t,
    ...n
  }) {
    return this.authPromise || (this.authPromise = d({
      ...n,
      method: "web_app_biometry_request_auth",
      event: "biometry_auth_requested",
      postEvent: this.postEvent,
      params: {
        // TODO: Check if reason is empty works fine.
        reason: (t || "").trim()
      }
    }).then(({ token: r }) => r).finally(() => this.authPromise = void 0)), this.authPromise;
  }
  /**
   * A unique device identifier that can be used to match the token to the device.
   */
  get deviceId() {
    return this.get("deviceId");
  }
  /**
   * Opens the biometric access settings for bots. Useful when you need to request biometrics
   * access to users who haven't granted it yet.
   *
   * _Note that this method can be called only in response to user interaction with the Mini App
   * interface (e.g. a click inside the Mini App or on the main button)_.
   * @since 7.2
   */
  openSettings() {
    this.postEvent("web_app_biometry_open_settings");
  }
  /**
   * Requests permission to use biometrics.
   * @since 7.2
   * @returns Promise with true, if access was granted.
   */
  requestAccess({ reason: t, ...n } = {}) {
    return this.accessPromise || (this.accessPromise = d({
      ...n,
      postEvent: this.postEvent,
      method: "web_app_biometry_request_access",
      event: "biometry_info_received",
      params: { reason: t || "" }
    }).then((r) => {
      const i = Ne(r);
      return this.set(i), i.accessGranted;
    }).finally(() => this.accessPromise = void 0)), this.accessPromise;
  }
  /**
   * The type of biometrics currently available on the device.
   */
  get biometryType() {
    return this.get("biometryType");
  }
  /**
   * Shows whether token was saved previously in the local secure storage.
   */
  get tokenSaved() {
    return this.get("tokenSaved");
  }
  /**
   * Updates the biometric token in a secure storage on the device.
   * @returns Promise with `true`, if token was updated.
   */
  async updateToken({ token: t, ...n } = {}) {
    return ["removed", "updated"].includes(
      (await d({
        ...n,
        postEvent: this.postEvent,
        method: "web_app_biometry_update_token",
        event: "biometry_token_updated",
        params: { token: t || "" }
      })).status
    );
  }
}
async function xt(s) {
  return Ne(
    await d({
      ...s || {},
      method: "web_app_biometry_get_info",
      event: "biometry_info_received"
    })
  );
}
const rs = l(
  "biometryManager",
  async ({ postEvent: s, version: e, state: t }) => new Pt({
    ...t || v("web_app_biometry_get_info", e) ? t || await xt({ timeout: 1e3 }) : {
      available: !1,
      accessGranted: !1,
      accessRequested: !1,
      tokenSaved: !1,
      deviceId: ""
    },
    version: e,
    postEvent: s
  })
);
class ee extends Y {
  constructor() {
    super(...arguments);
    /**
     * Adds a new event listener.
     */
    c(this, "on", this.state.on.bind(this.state));
    /**
     * Removes the event listener.
     */
    c(this, "off", this.state.off.bind(this.state));
  }
}
class Ct extends ee {
  constructor(e, t) {
    super({ isConfirmationNeeded: e }), this.postEvent = t;
  }
  set isConfirmationNeeded(e) {
    this.set("isConfirmationNeeded", e), this.postEvent("web_app_setup_closing_behavior", { need_confirmation: e });
  }
  /**
   * True, if the confirmation dialog should be shown while the user is trying to close
   * the Mini App.
   */
  get isConfirmationNeeded() {
    return this.get("isConfirmationNeeded");
  }
  /**
   * Disables the confirmation dialog when closing the Mini App.
   */
  disableConfirmation() {
    this.isConfirmationNeeded = !1;
  }
  /**
   * Enables the confirmation dialog when closing the Mini App.
   */
  enableConfirmation() {
    this.isConfirmationNeeded = !0;
  }
}
const is = l(
  "closingBehavior",
  ({
    postEvent: s,
    state: e = { isConfirmationNeeded: !1 }
  }) => new Ct(e.isConfirmationNeeded, s)
);
class te {
  constructor(e, t) {
    /**
     * @returns True, if specified method is supported by the current component.
     */
    c(this, "supports");
    this.supports = ve(e, t);
  }
}
function Tt(s) {
  if (Array.isArray(s))
    return s;
  if (typeof s == "string")
    try {
      const e = JSON.parse(s);
      if (Array.isArray(e))
        return e;
    } catch {
    }
  throw E();
}
class Rt extends D {
  constructor(t, n, r) {
    super(Tt, n, r);
    c(this, "itemParser");
    this.itemParser = typeof t == "function" ? t : t.parse.bind(t);
  }
  /**
   * Attempts to parse passed value
   * @param value - value to parse.
   * @throws {SDKError} ERR_PARSE
   * @see ERR_PARSE
   */
  parse(t) {
    const n = super.parse(t);
    return n === void 0 ? n : n.map(this.itemParser);
  }
  of(t) {
    return this.itemParser = typeof t == "function" ? t : t.parse.bind(t), this;
  }
}
function At(s) {
  return new Rt((e) => e, !1, s);
}
function re(s, e) {
  return Object.fromEntries(s.map((t) => [t, e]));
}
class It extends te {
  constructor(e, t, n) {
    super(e, {
      delete: "web_app_invoke_custom_method",
      get: "web_app_invoke_custom_method",
      getKeys: "web_app_invoke_custom_method",
      set: "web_app_invoke_custom_method"
    }), this.createRequestId = t, this.postEvent = n;
  }
  /**
   * Deletes specified key or keys from the cloud storage.
   * @param keyOrKeys - key or keys to delete.
   * @param options - request execution options.
   */
  async delete(e, t = {}) {
    const n = Array.isArray(e) ? e : [e];
    n.length && await C(
      "deleteStorageValues",
      { keys: n },
      this.createRequestId(),
      { ...t, postEvent: this.postEvent }
    );
  }
  /**
   * Returns list of all keys presented in the cloud storage.
   * @param options - request execution options.
   */
  async getKeys(e = {}) {
    return At().of(h()).parse(
      await C(
        "getStorageKeys",
        {},
        this.createRequestId(),
        { ...e, postEvent: this.postEvent }
      )
    );
  }
  async get(e, t = {}) {
    const n = Array.isArray(e) ? e : [e];
    if (!n.length)
      return re(n, "");
    const r = await C(
      "getStorageValues",
      { keys: n },
      this.createRequestId(),
      { ...t, postEvent: this.postEvent }
    ), i = g(re(n, h()), "CloudStorageData").parse(r);
    return Array.isArray(e) ? i : i[e];
  }
  /**
   * Saves specified value by key.
   * @param key - storage key.
   * @param value - storage value.
   * @param options - request execution options.
   */
  async set(e, t, n = {}) {
    await C(
      "saveStorageValue",
      { key: e, value: t },
      this.createRequestId(),
      { ...n, postEvent: this.postEvent }
    );
  }
}
const os = l(
  ({ createRequestId: s, postEvent: e, version: t }) => new It(t, s, e)
);
class qt extends te {
  constructor(e, t) {
    super(e, {
      impactOccurred: "web_app_trigger_haptic_feedback",
      notificationOccurred: "web_app_trigger_haptic_feedback",
      selectionChanged: "web_app_trigger_haptic_feedback"
    }), this.postEvent = t;
  }
  /**
   * A method tells that an impact occurred. The Telegram app may play the
   * appropriate haptics based on style value passed.
   * @param style - impact style.
   */
  impactOccurred(e) {
    this.postEvent("web_app_trigger_haptic_feedback", {
      type: "impact",
      impact_style: e
    });
  }
  /**
   * A method tells that a task or action has succeeded, failed, or produced
   * a warning. The Telegram app may play the appropriate haptics based on
   * type value passed.
   * @param type - notification type.
   */
  notificationOccurred(e) {
    this.postEvent("web_app_trigger_haptic_feedback", {
      type: "notification",
      notification_type: e
    });
  }
  /**
   * A method tells that the user has changed a selection. The Telegram app
   * may play the appropriate haptics.
   *
   * Do not use this feedback when the user makes or confirms a selection;
   * use it only when the selection changes.
   */
  selectionChanged() {
    this.postEvent("web_app_trigger_haptic_feedback", { type: "selection_change" });
  }
}
const as = l(
  ({ version: s, postEvent: e }) => new qt(s, e)
);
class kt {
  constructor(e) {
    this.initData = e;
  }
  /**
   * @see InitDataParsed.authDate
   */
  get authDate() {
    return this.initData.authDate;
  }
  /**
   * @see InitDataParsed.canSendAfter
   */
  get canSendAfter() {
    return this.initData.canSendAfter;
  }
  /**
   * Date after which it is allowed to call
   * the [answerWebAppQuery](https://core.telegram.org/bots/api#answerwebappquery) method.
   */
  get canSendAfterDate() {
    const { canSendAfter: e } = this;
    return e ? new Date(this.authDate.getTime() + e * 1e3) : void 0;
  }
  /**
   * @see InitDataParsed.chat
   */
  get chat() {
    return this.initData.chat;
  }
  /**
   * @see InitDataParsed.chatType
   */
  get chatType() {
    return this.initData.chatType;
  }
  /**
   * @see InitDataParsed.chatInstance
   */
  get chatInstance() {
    return this.initData.chatInstance;
  }
  /**
   * @see InitDataParsed.hash
   */
  get hash() {
    return this.initData.hash;
  }
  /**
   * @see InitDataParsed.queryId
   */
  get queryId() {
    return this.initData.queryId;
  }
  /**
   * @see InitDataParsed.receiver
   */
  get receiver() {
    return this.initData.receiver;
  }
  /**
   * @see InitDataParsed.startParam
   */
  get startParam() {
    return this.initData.startParam;
  }
  /**
   * @see InitDataParsed.user
   */
  get user() {
    return this.initData.user;
  }
}
const cs = l(
  ({ initData: s }) => s ? new kt(s) : void 0
);
function ps(s) {
  return Se().parse(s);
}
class Nt extends P {
  constructor(e, t, n) {
    super({ isOpened: e }, t, { open: "web_app_open_invoice" }), this.postEvent = n;
  }
  set isOpened(e) {
    this.set("isOpened", e);
  }
  /**
   * True if invoice is currently opened.
   */
  get isOpened() {
    return this.get("isOpened");
  }
  async open(e, t) {
    if (this.isOpened)
      throw new Error("Invoice is already opened");
    let n;
    if (!t)
      n = e;
    else {
      const { hostname: r, pathname: i } = new URL(e, window.location.href);
      if (r !== "t.me")
        throw new Error(`Incorrect hostname: ${r}`);
      const o = i.match(/^\/(\$|invoice\/)([A-Za-z0-9\-_=]+)$/);
      if (!o)
        throw new Error('Link pathname has incorrect format. Expected to receive "/invoice/{slug}" or "/${slug}"');
      [, , n] = o;
    }
    this.isOpened = !0;
    try {
      return (await d({
        method: "web_app_open_invoice",
        event: "invoice_closed",
        params: { slug: n },
        postEvent: this.postEvent,
        capture(i) {
          return n === i.slug;
        }
      })).status;
    } finally {
      this.isOpened = !1;
    }
  }
}
const hs = l(
  ({ version: s, postEvent: e }) => new Nt(!1, s, e)
);
class Vt extends Y {
  constructor({ postEvent: t, ...n }) {
    super(n);
    c(this, "postEvent");
    /**
     * Adds a new event listener.
     * @param event - event to listen.
     * @param listener - listener to add.
     */
    c(this, "on", (t, n) => t === "click" ? w("main_button_pressed", n) : this.state.on(t, n));
    /**
     * Removes the event listener.
     * @param event - event to listen.
     * @param listener - listener to remove.
     */
    c(this, "off", (t, n) => t === "click" ? B("main_button_pressed", n) : this.state.off(t, n));
    this.postEvent = t;
  }
  /**
   * The MainButton background color.
   */
  get bgColor() {
    return this.get("bgColor");
  }
  /**
   * Sends current local state to the Telegram application.
   */
  commit() {
    this.text !== "" && this.postEvent("web_app_setup_main_button", {
      is_visible: this.isVisible,
      is_active: this.isEnabled,
      is_progress_visible: this.isLoaderVisible,
      text: this.text,
      color: this.bgColor,
      text_color: this.textColor
    });
  }
  /**
   * Disables the MainButton.
   * @see Does not work on Android: https://github.com/Telegram-Mini-Apps/issues/issues/1
   */
  disable() {
    return this.isEnabled = !1, this;
  }
  /**
   * Enables the MainButton.
   */
  enable() {
    return this.isEnabled = !0, this;
  }
  /**
   * Hides the MainButton.
   */
  hide() {
    return this.isVisible = !1, this;
  }
  /**
   * Hides the MainButton loading indicator.
   */
  hideLoader() {
    return this.isLoaderVisible = !1, this;
  }
  set isEnabled(t) {
    this.setParams({ isEnabled: t });
  }
  /**
   * True if the MainButton is enabled.
   */
  get isEnabled() {
    return this.get("isEnabled");
  }
  set isLoaderVisible(t) {
    this.setParams({ isLoaderVisible: t });
  }
  /**
   * True if the MainButton loader is visible.
   */
  get isLoaderVisible() {
    return this.get("isLoaderVisible");
  }
  set isVisible(t) {
    this.setParams({ isVisible: t });
  }
  /**
   * True if the MainButton is visible.
   */
  get isVisible() {
    return this.get("isVisible");
  }
  /**
   * Shows the MainButton.
   *
   * Note that opening the Mini App from the attachment menu hides the main button until the
   * user interacts with the Mini App interface.
   */
  show() {
    return this.isVisible = !0, this;
  }
  /**
   * Shows a loading indicator on the Main Button.
   */
  showLoader() {
    return this.isLoaderVisible = !0, this;
  }
  /**
   * Sets a new MainButton text. Minimal length for the text is 1 symbol, and maximum is 64 symbols.
   * @param text - a new text.
   */
  setText(t) {
    return this.setParams({ text: t });
  }
  /**
   * Sets a new Main Button text color.
   * @param textColor - new text color.
   */
  setTextColor(t) {
    return this.setParams({ textColor: t });
  }
  /**
   * Updates current Main Button color.
   * @param bgColor - color to set.
   */
  setBgColor(t) {
    return this.setParams({ bgColor: t });
  }
  /**
   * Allows setting multiple Main Button parameters.
   * @param params - Main Button parameters.
   */
  setParams(t) {
    return this.set(t), this.commit(), this;
  }
  /**
   * The MainButton text.
   */
  get text() {
    return this.get("text");
  }
  /**
   * The MainButton text color.
   */
  get textColor() {
    return this.get("textColor");
  }
}
const us = l(
  "mainButton",
  ({
    postEvent: s,
    themeParams: e,
    state: t = {
      isVisible: !1,
      isEnabled: !1,
      text: "",
      isLoaderVisible: !1,
      textColor: e.buttonTextColor || "#ffffff",
      bgColor: e.buttonColor || "#000000"
    }
  }) => new Vt({ ...t, postEvent: s })
);
function Dt() {
  return K({
    contact: g({
      userId: {
        type: y(),
        from: "user_id"
      },
      phoneNumber: {
        type: h(),
        from: "phone_number"
      },
      firstName: {
        type: h(),
        from: "first_name"
      },
      lastName: {
        type: h().optional(),
        from: "last_name"
      }
    }),
    authDate: {
      type: Ee(),
      from: "auth_date"
    },
    hash: h()
  }, "RequestedContact");
}
function Ve(s, e) {
  return (t) => {
    const [n, r] = e[t];
    return v(n, r, s);
  };
}
function Mt(s) {
  return new Promise((e) => {
    setTimeout(e, s);
  });
}
class Bt extends P {
  constructor({ postEvent: t, createRequestId: n, version: r, botInline: i, ...o }) {
    super(o, r, {
      requestPhoneAccess: "web_app_request_phone",
      requestWriteAccess: "web_app_request_write_access",
      switchInlineQuery: "web_app_switch_inline_query",
      setHeaderColor: "web_app_set_header_color",
      setBackgroundColor: "web_app_set_background_color"
    });
    c(this, "botInline");
    c(this, "postEvent");
    c(this, "createRequestId");
    c(this, "requestPhoneAccessPromise");
    c(this, "requestWriteAccessPromise");
    /**
     * Checks if specified method parameter is supported by current component.
     */
    c(this, "supportsParam");
    this.createRequestId = n, this.postEvent = t, this.botInline = i;
    const a = this.supports.bind(this);
    this.supports = (p) => a(p) ? p !== "switchInlineQuery" || i : !1, this.supportsParam = Ve(r, {
      "setHeaderColor.color": ["web_app_set_header_color", "color"],
      "close.returnBack": ["web_app_close", "return_back"]
    });
  }
  /**
   * Attempts to get requested contact.
   * @param timeout - request timeout.
   */
  async getRequestedContact({
    timeout: t = 1e4
  } = {}) {
    return Dt().parse(
      await C(
        "getRequestedContact",
        {},
        this.createRequestId(),
        { postEvent: this.postEvent, timeout: t }
      )
    );
  }
  /**
   * The Mini App background color.
   * @example "#ffaabb"
   */
  get bgColor() {
    return this.get("bgColor");
  }
  /**
   * Closes the Mini App.
   * @param returnBack - should the application be wrapped into the bottom bar.
   */
  close(t) {
    this.postEvent("web_app_close", this.supportsParam("close.returnBack") ? { return_back: t } : {});
  }
  /**
   * The Mini App header color.
   * @example "#ffaabb"
   * @example "bg_color"
   */
  get headerColor() {
    return this.get("headerColor");
  }
  /**
   * True if the Mini App is currently launched in bot inline mode.
   */
  get isBotInline() {
    return this.botInline;
  }
  /**
   * True if the current Mini App background color is recognized as dark.
   */
  get isDark() {
    return ye(this.bgColor);
  }
  /**
   * Informs the Telegram app that the Mini App is ready to be displayed.
   *
   * It is recommended to call this method as early as possible, as soon as all essential
   * interface elements loaded. Once this method called, the loading placeholder is hidden
   * and the Mini App shown.
   *
   * If the method not called, the placeholder will be hidden only when the page fully loaded.
   */
  ready() {
    this.postEvent("web_app_ready");
  }
  /**
   * Requests current user contact information. In contrary to requestPhoneAccess, this method
   * returns promise with contact information that rejects in case, user denied access, or request
   * failed.
   * @param options - additional options.
   */
  async requestContact({ timeout: t = 5e3 } = {}) {
    try {
      return await this.getRequestedContact();
    } catch {
    }
    if (await this.requestPhoneAccess() !== "sent")
      throw new Error("Access denied.");
    const r = Date.now() + t;
    let i = 50;
    return be(async () => {
      for (; Date.now() < r; ) {
        try {
          return await this.getRequestedContact();
        } catch {
        }
        await Mt(i), i += 50;
      }
      throw we(t);
    }, t);
  }
  /**
   * Requests current user phone access. Method returns promise, which resolves
   * status of the request. In case, user accepted the request, Mini App bot will receive
   * the according notification.
   *
   * To obtain the retrieved information instead, utilize the `requestContact` method.
   * @param options - additional options.
   * @see requestContact
   */
  async requestPhoneAccess(t = {}) {
    return this.requestPhoneAccessPromise || (this.requestPhoneAccessPromise = d({
      ...t,
      method: "web_app_request_phone",
      event: "phone_requested",
      postEvent: this.postEvent
    }).then(({ status: n }) => n).finally(() => this.requestPhoneAccessPromise = void 0)), this.requestPhoneAccessPromise;
  }
  /**
   * Requests write message access to current user.
   * @param options - additional options.
   */
  async requestWriteAccess(t = {}) {
    return this.requestWriteAccessPromise || (this.requestWriteAccessPromise = d({
      ...t,
      method: "web_app_request_write_access",
      event: "write_access_requested",
      postEvent: this.postEvent
    }).then(({ status: n }) => n).finally(() => this.requestWriteAccessPromise = void 0)), this.requestWriteAccessPromise;
  }
  /**
   * A method used to send data to the bot. When this method called, a service message sent to
   * the bot containing the data of the length up to 4096 bytes, and the Mini App closed. See the
   * field `web_app_data` in the class [Message](https://core.telegram.org/bots/api#message).
   *
   * This method is only available for Mini Apps launched via a Keyboard button.
   * @param data - data to send to bot.
   * @throws {Error} data has incorrect size.
   */
  sendData(t) {
    const { size: n } = new Blob([t]);
    if (!n || n > 4096)
      throw new Error(`Passed data has incorrect size: ${n}`);
    this.postEvent("web_app_data_send", { data: t });
  }
  /**
   * Updates current Mini App header color.
   *
   * @see No effect on desktop: https://github.com/Telegram-Mini-Apps/telegram-apps/issues/9
   * @see Works incorrectly in Android: https://github.com/Telegram-Mini-Apps/telegram-apps/issues/8
   * @param color - color key or RGB color.
   */
  setHeaderColor(t) {
    this.postEvent("web_app_set_header_color", Q(t) ? { color: t } : { color_key: t }), this.set("headerColor", t);
  }
  /**
   * Updates current Mini App background color.
   *
   * @see No effect on desktop: https://github.com/Telegram-Mini-Apps/telegram-apps/issues/9
   * @see Works incorrectly in Android: https://github.com/Telegram-Mini-Apps/telegram-apps/issues/8
   * @param color - RGB color.
   */
  setBgColor(t) {
    this.postEvent("web_app_set_background_color", { color: t }), this.set("bgColor", t);
  }
  /**
   * Inserts the bot's username and the specified inline query in the current chat's input field.
   * Query may be empty, in which case only the bot's username will be inserted. The client prompts
   * the user to choose a specific chat, then opens that chat and inserts the bot's username and
   * the specified inline query in the input field.
   * @param text - text which should be inserted in the input after the current bot name. Max
   * length is 256 symbols.
   * @param chatTypes - List of chat types which could be chosen to send the message. Could be
   * empty list.
   */
  switchInlineQuery(t, n = []) {
    if (!this.supports("switchInlineQuery") && !this.isBotInline)
      throw new Error("Method is unsupported because Mini App should be launched in inline mode.");
    this.postEvent("web_app_switch_inline_query", { query: t, chat_types: n });
  }
}
const ls = l(
  "miniApp",
  ({
    themeParams: s,
    botInline: e = !1,
    state: t = {
      bgColor: s.bgColor || "#ffffff",
      headerColor: s.headerBgColor || "#000000"
    },
    ...n
  }) => new Bt({ ...n, ...t, botInline: e })
);
function Lt(s) {
  const e = s.message.trim(), t = (s.title || "").trim(), n = s.buttons || [];
  let r;
  if (t.length > 64)
    throw new Error(`Title has incorrect size: ${t.length}`);
  if (!e.length || e.length > 256)
    throw new Error(`Message has incorrect size: ${e.length}`);
  if (n.length > 3)
    throw new Error(`Buttons have incorrect size: ${n.length}`);
  return n.length ? r = n.map((i) => {
    const { id: o = "" } = i;
    if (o.length > 64)
      throw new Error(`Button ID has incorrect size: ${o}`);
    if (!i.type || i.type === "default" || i.type === "destructive") {
      const a = i.text.trim();
      if (!a.length || a.length > 64) {
        const p = i.type || "default";
        throw new Error(`Button text with type "${p}" has incorrect size: ${i.text.length}`);
      }
      return { ...i, text: a, id: o };
    }
    return { ...i, id: o };
  }) : r = [{ type: "close", id: "" }], { title: t, message: e, buttons: r };
}
class $t extends P {
  constructor(e, t, n) {
    super({ isOpened: e }, t, { open: "web_app_open_popup" }), this.postEvent = n;
  }
  set isOpened(e) {
    this.set("isOpened", e);
  }
  /**
   * True if the Popup is opened.
   */
  get isOpened() {
    return this.get("isOpened");
  }
  /**
   * A method that shows a native popup described by the `params` argument.
   * Promise will be resolved when popup is closed. Resolved value will have
   * an identifier of pressed button.
   *
   * In case, user clicked outside the popup or clicked top right popup close
   * button, null will be returned.
   *
   * @param options - popup parameters.
   * @throws {Error} Popup is already opened.
   */
  async open(e) {
    if (this.isOpened)
      throw new Error("Popup is already opened.");
    this.isOpened = !0;
    try {
      const { button_id: t = null } = await d({
        event: "popup_closed",
        method: "web_app_open_popup",
        postEvent: this.postEvent,
        params: Lt(e)
      });
      return t;
    } finally {
      this.isOpened = !1;
    }
  }
}
const ds = l(
  ({ postEvent: s, version: e }) => new $t(!1, e, s)
);
class Wt extends P {
  constructor(e, t, n) {
    super({ isOpened: e }, t, {
      close: "web_app_close_scan_qr_popup",
      open: "web_app_open_scan_qr_popup"
    }), this.postEvent = n;
  }
  /**
   * Closes the scanner.
   */
  close() {
    this.postEvent("web_app_close_scan_qr_popup"), this.isOpened = !1;
  }
  set isOpened(e) {
    this.set("isOpened", e);
  }
  /**
   * Returns true if the scanner is currently opened.
   */
  get isOpened() {
    return this.get("isOpened");
  }
  async open(e) {
    if (this.isOpened)
      throw new Error("The scanner is already opened");
    const { text: t, capture: n } = (typeof e == "string" ? { text: e } : e) || {};
    this.isOpened = !0;
    try {
      const i = (await d({
        method: "web_app_open_scan_qr_popup",
        event: ["qr_text_received", "scan_qr_popup_closed"],
        postEvent: this.postEvent,
        params: { text: t },
        capture(o) {
          return o.event === "scan_qr_popup_closed" || !n || n(o.payload);
        }
      }) || {}).data || null;
      return i && this.close(), i;
    } finally {
      this.isOpened = !1;
    }
  }
  // TODO: Streaming mode, allowing to scan several QRs until closed.
}
const _s = l(
  ({ version: s, postEvent: e }) => new Wt(!1, s, e)
);
class Ut extends Z {
  constructor(t, n, r) {
    super({ isVisible: t }, n, {
      show: "web_app_setup_settings_button",
      hide: "web_app_setup_settings_button"
    });
    /**
     * Adds a new event listener.
     * @param event - event to listen.
     * @param listener - listener to add.
     */
    c(this, "on", (t, n) => t === "click" ? w("settings_button_pressed", n) : this.state.on(t, n));
    /**
     * Removes the event listener.
     * @param event - event to listen.
     * @param listener - listener to remove.
     */
    c(this, "off", (t, n) => t === "click" ? B("settings_button_pressed", n) : this.state.off(t, n));
    this.postEvent = r;
  }
  set isVisible(t) {
    this.set("isVisible", t), this.postEvent("web_app_setup_settings_button", { is_visible: t });
  }
  /**
   * True if the SettingsButton is visible.
   */
  get isVisible() {
    return this.get("isVisible");
  }
  /**
   * Hides the SettingsButton.
   */
  hide() {
    this.isVisible = !1;
  }
  /**
   * Shows the SettingsButton.
   */
  show() {
    this.isVisible = !0;
  }
}
const fs = l(
  "settingsButton",
  ({
    version: s,
    postEvent: e,
    state: t = { isVisible: !1 }
  }) => new Ut(t.isVisible, s, e)
);
class Ht extends P {
  constructor(e, t, n) {
    super({ isVerticalSwipeEnabled: e }, t, {
      disableVerticalSwipe: "web_app_setup_swipe_behavior",
      enableVerticalSwipe: "web_app_setup_swipe_behavior"
    }), this.postEvent = n;
  }
  set isVerticalSwipeEnabled(e) {
    this.set("isVerticalSwipeEnabled", e), this.postEvent("web_app_setup_swipe_behavior", { allow_vertical_swipe: e });
  }
  /**
   * True, if the vertical swipe enabled.
   */
  get isVerticalSwipeEnabled() {
    return this.get("isVerticalSwipeEnabled");
  }
  /**
   * Disables the vertical swipe.
   */
  disableVerticalSwipe() {
    this.isVerticalSwipeEnabled = !1;
  }
  /**
   * Enables the vertical swipe.
   */
  enableVerticalSwipe() {
    this.isVerticalSwipeEnabled = !0;
  }
}
const gs = l(
  "swipeBehavior",
  ({
    postEvent: s,
    state: e = { isVerticalSwipeEnabled: !0 },
    version: t
  }) => new Ht(e.isVerticalSwipeEnabled, t, s)
);
function De(s) {
  return Pe().parse(s);
}
class Ot extends ee {
  /**
   * @since v6.10
   */
  get accentTextColor() {
    return this.get("accentTextColor");
  }
  get bgColor() {
    return this.get("bgColor");
  }
  get buttonColor() {
    return this.get("buttonColor");
  }
  get buttonTextColor() {
    return this.get("buttonTextColor");
  }
  get destructiveTextColor() {
    return this.get("destructiveTextColor");
  }
  /**
   * Returns the copy of the internal state of the current component instance.
   */
  getState() {
    return this.clone();
  }
  /**
   * @since v6.10
   */
  get headerBgColor() {
    return this.get("headerBgColor");
  }
  get hintColor() {
    return this.get("hintColor");
  }
  /**
   * @returns True in case, current color scheme is recognized as dark. This
   * value is calculated according to theme bg color.
   */
  get isDark() {
    return !this.bgColor || ye(this.bgColor);
  }
  get linkColor() {
    return this.get("linkColor");
  }
  get secondaryBgColor() {
    return this.get("secondaryBgColor");
  }
  /**
   * @since v6.10
   */
  get sectionBgColor() {
    return this.get("sectionBgColor");
  }
  /**
   * @since v6.10
   */
  get sectionHeaderTextColor() {
    return this.get("sectionHeaderTextColor");
  }
  /**
   * @since v7.6
   */
  get sectionSeparatorColor() {
    return this.get("sectionHeaderTextColor");
  }
  /**
   * Starts listening to the external theme changes and applies them.
   * @returns Function to stop listening.
   */
  listen() {
    return w("theme_changed", (e) => {
      this.set(De(e.theme_params));
    });
  }
  /**
   * @since v6.10
   */
  get subtitleTextColor() {
    return this.get("subtitleTextColor");
  }
  get textColor() {
    return this.get("textColor");
  }
}
const ws = l(
  "themeParams",
  ({ themeParams: s, state: e = s, addCleanup: t }) => {
    const n = new Ot(e);
    return t(n.listen()), n;
  }
);
function bs(s = {}) {
  return d({
    ...s,
    method: "web_app_request_theme",
    event: "theme_changed"
  }).then(De);
}
function I(s, e) {
  return s.startsWith(e) ? s : `${e}${s}`;
}
function q(s) {
  return new URL(
    typeof s == "string" ? s : `${s.pathname || ""}${I(s.search || "", "?")}${I(s.hash || "", "#")}`,
    "http://a"
  );
}
class Gt extends te {
  constructor(t, n, r) {
    super(t, { readTextFromClipboard: "web_app_read_text_from_clipboard" });
    /**
     * Checks if specified method parameter is supported by current component.
     */
    c(this, "supportsParam");
    this.version = t, this.createRequestId = n, this.postEvent = r, this.supportsParam = Ve(t, {
      "openLink.tryInstantView": ["web_app_open_link", "try_instant_view"]
    });
  }
  openLink(t, n) {
    const r = q(t).toString();
    if (!v("web_app_open_link", this.version)) {
      window.open(r, "_blank");
      return;
    }
    const i = typeof n == "boolean" ? { tryInstantView: n } : n || {};
    this.postEvent("web_app_open_link", {
      url: r,
      try_browser: i.tryBrowser,
      try_instant_view: i.tryInstantView
    });
  }
  /**
   * Opens a Telegram link inside Telegram app. The Mini App will be closed. It expects passing
   * link in full format, with hostname "t.me".
   * @param url - URL to be opened.
   * @throws {Error} URL has not allowed hostname.
   */
  openTelegramLink(t) {
    const { hostname: n, pathname: r, search: i } = new URL(t, "https://t.me");
    if (n !== "t.me")
      throw new Error(`URL has not allowed hostname: ${n}. Only "t.me" is allowed`);
    if (!v("web_app_open_tg_link", this.version)) {
      window.location.href = t;
      return;
    }
    this.postEvent("web_app_open_tg_link", { path_full: r + i });
  }
  /**
   * Reads text from clipboard and returns string or null. null is returned
   * in cases:
   * - Value in clipboard is not text
   * - Access to clipboard is not allowed
   */
  async readTextFromClipboard() {
    const t = this.createRequestId(), {
      data: n = null
    } = await d({
      method: "web_app_read_text_from_clipboard",
      event: "clipboard_text_received",
      postEvent: this.postEvent,
      params: { req_id: t },
      capture: ge(t)
    });
    return n;
  }
  /**
   * Shares specified URL with the passed to the chats, selected by user. After being called,
   * it closes the mini application.
   *
   * This method uses Telegram's Share Links.
   * @param url - URL to share.
   * @param text - text to append after the URL.
   * @see https://core.telegram.org/api/links#share-links
   * @see https://core.telegram.org/widgets/share#custom-buttons
   */
  shareURL(t, n) {
    this.openTelegramLink(
      "https://t.me/share/url?" + new URLSearchParams({ url: t, text: n || "" }).toString().replace(/\+/g, "%20")
    );
  }
}
const ms = l(
  ({ version: s, postEvent: e, createRequestId: t }) => new Gt(s, t, e)
);
async function Me(s = {}) {
  const {
    is_expanded: e,
    is_state_stable: t,
    ...n
  } = await d({
    ...s,
    method: "web_app_request_viewport",
    event: "viewport_changed"
  });
  return { ...n, isExpanded: e, isStateStable: t };
}
function x(s) {
  return s < 0 ? 0 : s;
}
class jt extends ee {
  constructor({ postEvent: t, stableHeight: n, height: r, width: i, isExpanded: o }) {
    super({
      height: x(r),
      isExpanded: o,
      stableHeight: x(n),
      width: x(i)
    });
    c(this, "postEvent");
    this.postEvent = t;
  }
  /**
   * Requests viewport information from the Telegram application and updates current Viewport
   * instance.
   * @param options - options to request fresh data.
   */
  async sync(t) {
    const { isStateStable: n, ...r } = await Me(t);
    this.set({
      ...r,
      stableHeight: n ? r.height : this.get("stableHeight")
    });
  }
  /**
   * The current height of the **visible area** of the Mini App.
   *
   * The application can display just the top part of the Mini App, with its lower part remaining
   * outside the screen area. From this position, the user can "pull" the Mini App to its
   * maximum height, while the bot can do the same by calling `expand` method. As the position of
   * the Mini App changes, the current height value of the visible area will be updated  in real
   * time.
   *
   * Please note that the refresh rate of this value is not sufficient to smoothly follow the
   * lower border of the window. It should not be used to pin interface elements to the bottom
   * of the visible area. It's more appropriate to use the value of the `stableHeight`
   * field for this purpose.
   *
   * @see stableHeight
   */
  get height() {
    return this.get("height");
  }
  /**
   * The height of the visible area of the Mini App in its last stable state.
   *
   * The application can display just the top part of the Mini App, with its lower part remaining
   * outside the screen area. From this position, the user can "pull" the Mini App to its
   * maximum height, while the application can do the same by calling `expand` method.
   *
   * Unlike the value of `height`, the value of `stableHeight` does not change as the position
   * of the Mini App changes with user gestures or during animations. The value of `stableHeight`
   * will be updated after all gestures and animations are completed and
   * the Mini App reaches its final size.
   *
   * @see height
   */
  get stableHeight() {
    return this.get("stableHeight");
  }
  /**
   * Starts listening to viewport changes and applies them.
   * @returns Function to stop listening.
   */
  listen() {
    return w("viewport_changed", (t) => {
      const {
        height: n,
        width: r,
        is_expanded: i,
        is_state_stable: o
      } = t, a = x(n);
      this.set({
        height: a,
        isExpanded: i,
        width: x(r),
        ...o ? { stableHeight: a } : {}
      });
    });
  }
  /**
   * True if the Mini App is expanded to the maximum available height. Otherwise, if
   * the Mini App occupies part of the screen and can be expanded to the full height using
   * `expand` method.
   * @see expand
   */
  get isExpanded() {
    return this.get("isExpanded");
  }
  /**
   * Current visible area width.
   */
  get width() {
    return this.get("width");
  }
  /**
   * A method that expands the Mini App to the maximum available height. To find out if the Mini
   * App is expanded to the maximum height, refer to the value of the `isExpanded`.
   * @see isExpanded
   */
  expand() {
    this.postEvent("web_app_expand"), this.set("isExpanded", !0);
  }
  /**
   * True if the current viewport height is stable and is not going to change in the next moment.
   */
  get isStable() {
    return this.stableHeight === this.height;
  }
}
const ys = l(
  "viewport",
  async ({ state: s, platform: e, postEvent: t, addCleanup: n }) => {
    let r = !1, i = 0, o = 0, a = 0;
    if (s)
      r = s.isExpanded, i = s.height, o = s.width, a = s.stableHeight;
    else if (["macos", "tdesktop", "unigram", "webk", "weba", "web"].includes(e))
      r = !0, i = window.innerHeight, o = window.innerWidth, a = window.innerHeight;
    else {
      const u = await Me({ timeout: 1e3, postEvent: t });
      r = u.isExpanded, i = u.height, o = u.width, a = u.isStateStable ? i : 0;
    }
    const p = new jt({
      postEvent: t,
      height: i,
      width: o,
      stableHeight: a,
      isExpanded: r
    });
    return n(p.listen()), p;
  }
);
function m(s, e) {
  document.documentElement.style.setProperty(s, e);
}
function vs(s, e, t) {
  t || (t = (a) => `--tg-${a}-color`);
  const n = t("header"), r = t("bg"), i = () => {
    const { headerColor: a } = s;
    if (Q(a))
      m(n, a);
    else {
      const { bgColor: p, secondaryBgColor: u } = e;
      a === "bg_color" && p ? m(n, p) : a === "secondary_bg_color" && u && m(n, u);
    }
    m(r, s.bgColor);
  }, o = [
    e.on("change", i),
    s.on("change", i)
  ];
  return i(), () => o.forEach((a) => a());
}
function Es(s, e) {
  e || (e = (n) => `--tg-theme-${n.replace(/[A-Z]/g, (r) => `-${r.toLowerCase()}`)}`);
  const t = () => {
    Object.entries(s.getState()).forEach(([n, r]) => {
      r && m(e(n), r);
    });
  };
  return t(), s.on("change", t);
}
function Ss(s, e) {
  e || (e = (u) => `--tg-viewport-${u}`);
  const [
    t,
    n,
    r
  ] = ["height", "width", "stable-height"].map((u) => e(u)), i = () => m(t, `${s.height}px`), o = () => m(n, `${s.width}px`), a = () => m(r, `${s.stableHeight}px`), p = [
    s.on("change:height", i),
    s.on("change:width", o),
    s.on("change:stableHeight", a)
  ];
  return i(), o(), a(), () => p.forEach((u) => u());
}
function Ps(s = !0) {
  const e = [
    w("reload_iframe", () => {
      A("iframe_will_reload"), window.location.reload();
    })
  ], t = () => e.forEach((n) => n());
  if (s) {
    const n = document.createElement("style");
    n.id = "telegram-custom-styles", document.head.appendChild(n), e.push(
      w("set_custom_style", (r) => {
        n.innerHTML = r;
      }),
      () => document.head.removeChild(n)
    );
  }
  return A("iframe_ready", { reload_supported: !0 }), t;
}
function xs() {
  return typeof window > "u";
}
async function Cs() {
  if (de(window))
    return !0;
  try {
    return await d({ method: "web_app_request_theme", event: "theme_changed", timeout: 100 }), !0;
  } catch {
    return !1;
  }
}
function Ts(s) {
  const e = typeof s == "string" ? X(s) : s;
  qe(e);
  function t(r) {
    if (typeof r == "string")
      try {
        const { eventType: i } = ue(r);
        i === "web_app_request_theme" && j("theme_changed", {
          theme_params: JSON.parse(Ie(e.themeParams))
        }), i === "web_app_request_viewport" && j("viewport_changed", {
          width: window.innerWidth,
          height: window.innerHeight,
          is_state_stable: !0,
          is_expanded: !0
        });
      } catch {
      }
  }
  if (_e()) {
    const r = window.parent.postMessage.bind(window.parent);
    window.parent.postMessage = (i) => {
      t(i), r(i);
    };
    return;
  }
  if (le(window)) {
    const r = window.external.notify.bind(window.external);
    window.external.notify = (i) => {
      t(i), r(i);
    };
    return;
  }
  const n = window.TelegramWebviewProxy;
  window.TelegramWebviewProxy = {
    ...n || {},
    postEvent(...r) {
      t(JSON.stringify({ eventType: r[0], eventData: r[1] })), n && n.postEvent(...r);
    }
  };
}
function zt(s) {
  return s instanceof V;
}
function Rs(s, e) {
  return zt(s) && s.type === e;
}
function L(s, e) {
  let t, n, r;
  return typeof s == "string" ? t = s : (t = s.pathname === void 0 ? e : s.pathname, n = s.params, r = s.id), Object.freeze({
    id: r || (Math.random() * 2 ** 14 | 0).toString(16),
    pathname: t,
    params: n
  });
}
class Ft {
  constructor(e, t, n = A) {
    /**
     * Navigation history.
     */
    c(this, "history");
    c(this, "ee", new R());
    /**
     * True, if current navigator is currently attached.
     */
    c(this, "attached", !1);
    /**
     * Goes to the previous history item.
     */
    c(this, "back", () => this.go(-1));
    /**
     * Adds new event listener.
     */
    c(this, "on", this.ee.on.bind(this.ee));
    /**
     * Removes event listener.
     */
    c(this, "off", this.ee.off.bind(this.ee));
    if (this._index = t, this.postEvent = n, e.length === 0)
      throw f(Ze, "History should not be empty.");
    if (t < 0 || t >= e.length)
      throw f(
        Ke,
        "Index should not be zero and higher or equal than history size."
      );
    this.history = e.map((r) => L(r, ""));
  }
  /**
   * Allows this navigator to control the `BackButton` visibility state. It also tracks the
   * `BackButton` clicks and calls the `back` method.
   */
  attach() {
    this.attached || (this.attached = !0, this.sync(), w("back_button_pressed", this.back));
  }
  /**
   * Currently active history item.
   */
  get current() {
    return this.history[this.index];
  }
  /**
   * Prevents current navigator from controlling the BackButton visibility state.
   */
  detach() {
    this.attached = !1, B("back_button_pressed", this.back);
  }
  /**
   * Goes to the next history item.
   */
  forward() {
    this.go(1);
  }
  /**
   * Changes currently active history item index by the specified delta. This method doesn't
   * change index in case, the updated index points to the non-existing history item. This behavior
   * is preserved until the `fit` argument is specified.
   * @param delta - index delta.
   * @param fit - cuts the delta argument to fit the bounds `[0, history.length - 1]`.
   */
  go(e, t) {
    const n = this.index + e, r = Math.min(
      Math.max(0, n),
      this.history.length - 1
    );
    (n === r || t) && this.replaceAndMove(r, this.history[r]);
  }
  /**
   * Goes to the specified index. Method does nothing in case, passed index is out of bounds.
   *
   * If "fit" option was specified and index is out of bounds, it will be cut to the nearest
   * bound.
   * @param index - target index.
   * @param fit - cuts the index argument to fit the bounds `[0, history.length - 1]`.
   */
  goTo(e, t) {
    this.go(e - this.index, t);
  }
  /**
   * True if navigator has items before the current item.
   */
  get hasPrev() {
    return this.index > 0;
  }
  /**
   * True if navigator has items after the current item.
   */
  get hasNext() {
    return this.index !== this.history.length - 1;
  }
  /**
   * Currently active history item index.
   */
  get index() {
    return this._index;
  }
  /**
   * Adds a new history item removing all after the current one.
   * @param item - item to add.
   */
  push(e) {
    this.hasNext && this.history.splice(this.index + 1), this.replaceAndMove(this.index + 1, L(e, this.current.pathname));
  }
  /**
   * Replaces the current history item.
   * @param item - item to replace the current item with.
   */
  replace(e) {
    this.replaceAndMove(this.index, L(e, this.current.pathname));
  }
  /**
   * Sets history item by the specified index.
   * @param index - history item index to replace.
   * @param historyItem - history item to set.
   */
  replaceAndMove(e, t) {
    const n = e - this.index;
    if (!n && this.current === t)
      return;
    const r = this.current;
    if (this.index !== e) {
      const i = this._index;
      this._index = e, this.attached && i > 0 != e > 0 && this.sync();
    }
    this.history[e] = t, this.ee.emit("change", {
      navigator: this,
      from: r,
      to: this.current,
      delta: n
    });
  }
  /**
   * Actualizes the `BackButton` visibility state.
   */
  sync() {
    this.postEvent("web_app_setup_back_button", { is_visible: !!this.index });
  }
}
function $({
  params: s,
  ...e
}) {
  return { ...s || { hash: "", search: "" }, ...e };
}
function N(s) {
  const e = typeof s == "string" ? s.startsWith("/") : !!(s.pathname && s.pathname.startsWith("/")), t = q(s);
  return `${e ? t.pathname : t.pathname.slice(1)}${t.search}${t.hash}`;
}
function W(s, e, t) {
  let n, r;
  typeof s == "string" ? n = s : (n = N(s), t = s.state, r = s.id);
  const { pathname: i, search: o, hash: a } = new URL(n, `http://a${I(e, "/")}`);
  return { id: r, pathname: i, params: { hash: a, search: o, state: t } };
}
async function T(s) {
  return s === 0 ? !0 : Promise.race([
    new Promise((e) => {
      const t = G("popstate", () => {
        t(), e(!0);
      });
      window.history.go(s);
    }),
    // Usually, it takes about 1ms to emit this event, but we use some buffer.
    new Promise((e) => {
      setTimeout(e, 50, !1);
    })
  ]);
}
async function Jt() {
  if (window.history.length <= 1 || (window.history.pushState(null, ""), await T(1 - window.history.length)))
    return;
  let e = await T(-1);
  for (; e; )
    e = await T(-1);
}
function Be(s) {
  return q(s).pathname;
}
const ie = 0, U = 1, H = 2;
class Le {
  constructor(e, t, { postEvent: n, hashMode: r = "classic", base: i } = {}) {
    c(this, "navigator");
    c(this, "ee", new R());
    c(this, "hashMode");
    c(this, "base");
    /**
     * Shows whether the navigator is currently attached to the browser history.
     */
    c(this, "attached", !1);
    /**
     * Handles the window "popstate" event.
     * @param state - event state.
     */
    c(this, "onPopState", ({ state: e }) => {
      if (e === null)
        return this.push(this.parsePath(window.location.href));
      e === ie ? window.history.forward() : e === U && this.back(), e === H && this.forward();
    });
    /**
     * Underlying navigator change event listener.
     */
    c(this, "onNavigatorChange", async ({
      to: e,
      from: t,
      delta: n
    }) => {
      this.attached && await this.syncHistory(), this.ee.emit("change", {
        delta: n,
        from: $(t),
        to: $(e),
        navigator: this
      });
    });
    /**
     * Adds new event listener.
     */
    c(this, "on", this.ee.on.bind(this.ee));
    /**
     * Removes event listener.
     */
    c(this, "off", this.ee.off.bind(this.ee));
    this.navigator = new Ft(
      e.map((o) => W(o, "/")),
      t,
      n
    ), this.navigator.on("change", (o) => {
      this.onNavigatorChange(o);
    }), this.hashMode = r, this.base = Be(i || "");
  }
  /**
   * Attaches current navigator to the browser history allowing navigator to manipulate it.
   */
  async attach() {
    this.attached || (this.attached = !0, this.navigator.attach(), window.addEventListener("popstate", this.onPopState), await this.syncHistory());
  }
  /**
   * Goes back in history by 1.
   */
  back() {
    this.navigator.back();
  }
  /**
   * Detaches current navigator from the browser history.
   */
  detach() {
    this.attached = !1, this.navigator.detach(), window.removeEventListener("popstate", this.onPopState);
  }
  /**
   * Goes forward in history.
   */
  forward() {
    return this.navigator.forward();
  }
  /**
   * Current history cursor.
   */
  get index() {
    return this.navigator.index;
  }
  /**
   * Current history item identifier.
   */
  get id() {
    return this.navigator.current.id;
  }
  /**
   * Changes currently active history item index by the specified delta. This method doesn't
   * change index in case, the updated index points to the non-existing history item. This behavior
   * is preserved until the `fit` argument is specified.
   * @param delta - index delta.
   * @param fit - cuts the delta argument to fit the bounds `[0, history.length - 1]`.
   */
  go(e, t) {
    return this.navigator.go(e, t);
  }
  /**
   * Goes to the specified index. Method does nothing in case, passed index is out of bounds.
   *
   * If "fit" option was specified and index is out of bounds, it will be cut to the nearest
   * bound.
   * @param index - target index.
   * @param fit - cuts the index argument to fit the bounds `[0, history.length - 1]`.
   */
  goTo(e, t) {
    this.navigator.goTo(e, t);
  }
  /**
   * Current history item hash.
   * @see URL.hash
   * @example
   * "", "#my-hash"
   */
  get hash() {
    return (this.navigator.current.params || {}).hash || "";
  }
  /**
   * True if navigator has items before the current item.
   */
  get hasPrev() {
    return this.navigator.hasPrev;
  }
  /**
   * True if navigator has items after the current item.
   */
  get hasNext() {
    return this.navigator.hasNext;
  }
  /**
   * Navigation history.
   */
  get history() {
    return this.navigator.history.map($);
  }
  /**
   * Path, including pathname, search and hash.
   * @example Pathname only.
   * "/pathname"
   * @example Pathname + search.
   * "/pathname?search"
   * @example Pathname + hash.
   * "/pathname#hash"
   * @example Pathname + search + hash.
   * "/pathname?search#hash"
   */
  get path() {
    return N(this);
  }
  /**
   * Current pathname. Always starts with the slash.
   * @see URL.pathname
   * @example
   * "/", "/abc"
   */
  get pathname() {
    return this.navigator.current.pathname;
  }
  /**
   * Depending on the current navigation type, parses incoming path and returns it presented as
   * an object. In other words, this method parses the passed path and returns object, describing
   * how the navigator "sees" it.
   *
   * @example Hash mode is omitted.
   * parsePath('/abc?a=1#hash');
   * // { pathname: '/abc', search: '?a=1', hash: '#hash' }
   * parsePath('http://example.com/abc?a=1#hash');
   * // { pathname: '/abc', search: '?a=1', hash: '#hash' }
   *
   * @example Hash mode is enabled.
   * parsePath('/abc?a=1#tma?is=cool#yeah');
   * // { pathname: '/tma', search: '?is=cool', hash: '#yeah' }
   * parsePath('http://example.com/abc?a=1#tma?is=cool#yeah');
   * // { pathname: '/tma', search: '?is=cool', hash: '#yeah' }
   */
  parsePath(e) {
    let t = q(e);
    return this.hashMode && (t = q(t.hash.slice(1))), {
      pathname: t.pathname,
      search: t.search,
      hash: t.hash
    };
  }
  push(e, t) {
    const n = W(e, this.path), { state: r = t } = n.params;
    this.navigator.push({ ...n, params: { ...n.params, state: r } });
  }
  replace(e, t) {
    const n = W(e, this.path), { state: r = t } = n.params;
    this.navigator.replace({ ...n, params: { ...n.params, state: r } });
  }
  /**
   * Combines the navigator `base` property with the passed path data applying the navigator
   * navigation mode.
   * @param value - path presented as string or URLLike.
   */
  renderPath(e) {
    const t = (this.base.length === 1 ? "" : this.base) + I(N(e), "/");
    return this.hashMode ? I(t.slice(1), this.hashMode === "classic" ? "#" : "#/") : t;
  }
  /**
   * Synchronizes current navigator state with browser history.
   */
  async syncHistory() {
    window.removeEventListener("popstate", this.onPopState);
    const { state: e } = this, t = this.renderPath(this);
    await Jt(), this.hasPrev && this.hasNext ? (window.history.replaceState(U, ""), window.history.pushState(e, "", t), window.history.pushState(H, ""), await T(-1)) : this.hasPrev ? (window.history.replaceState(U, ""), window.history.pushState(e, "", t)) : this.hasNext ? (window.history.replaceState(e, t), window.history.pushState(H, ""), await T(-1)) : (window.history.replaceState(ie, ""), window.history.pushState(e, "", t)), window.addEventListener("popstate", this.onPopState);
  }
  /**
   * Current query parameters.
   * @see URL.search
   * @example
   * "", "?", "?a=1"
   */
  get search() {
    return (this.navigator.current.params || {}).search || "";
  }
  /**
   * Current history item state.
   */
  get state() {
    return (this.navigator.current.params || {}).state;
  }
}
function Qt(s) {
  s || (s = {});
  const { href: e, hash: t } = window.location;
  let n = N(
    s.hashMode === null ? e : t.includes("?") ? t.slice(1) : `?${t.slice(1)}`
  );
  const r = s.base ? Be(s.base) : void 0;
  if (r) {
    if (!n.startsWith(r))
      throw f(
        Xe,
        `Path "${n}" expected to be starting with "${r}"`
      );
    n = n.slice(r.length);
  }
  return new Le([n], 0, s);
}
function As(s) {
  const e = s.match(/#(.+)/);
  return e ? e[1] : null;
}
function Yt(s, e) {
  if (ke()) {
    const t = sessionStorage.getItem(s);
    if (t)
      try {
        const { index: n, history: r } = JSON.parse(t);
        return new Le(
          r,
          n,
          e
        );
      } catch (n) {
        console.error("Unable to restore hash navigator state.", n);
      }
  }
  return Qt(e);
}
function Is(s, e) {
  const t = Yt(s, e), n = () => sessionStorage.setItem(s, JSON.stringify({
    index: t.index,
    history: t.history
  }));
  return t.on("change", n), n(), t;
}
export {
  lt as BackButton,
  Ft as BasicNavigator,
  Pt as BiometryManager,
  Le as BrowserNavigator,
  Ct as ClosingBehavior,
  It as CloudStorage,
  Xe as ERR_INVALID_PATH_BASE,
  Je as ERR_INVOKE_CUSTOM_METHOD_RESPONSE,
  ze as ERR_METHOD_PARAMETER_UNSUPPORTED,
  je as ERR_METHOD_UNSUPPORTED,
  Ze as ERR_NAVIGATION_HISTORY_EMPTY,
  Ke as ERR_NAVIGATION_INDEX_INVALID,
  Xt as ERR_NAVIGATION_ITEM_INVALID,
  ce as ERR_PARSE,
  es as ERR_SSR_INIT,
  Qe as ERR_TIMED_OUT,
  Ye as ERR_UNEXPECTED_TYPE,
  Fe as ERR_UNKNOWN_ENV,
  R as EventEmitter,
  qt as HapticFeedback,
  kt as InitData,
  Nt as Invoice,
  Vt as MainButton,
  Bt as MiniApp,
  $t as Popup,
  Wt as QRScanner,
  V as SDKError,
  Ut as SettingsButton,
  Ht as SwipeBehavior,
  Ot as ThemeParams,
  Gt as Utils,
  jt as Viewport,
  At as array,
  vs as bindMiniAppCSSVars,
  Es as bindThemeParamsCSSVars,
  Ss as bindViewportCSSVars,
  b as boolean,
  ge as captureSameReq,
  z as classNames,
  ot as compareVersions,
  Qt as createBrowserNavigatorFromLocation,
  pt as createPostEvent,
  q as createSafeURL,
  Ee as date,
  As as getHash,
  Be as getPathname,
  ns as initBackButton,
  rs as initBiometryManager,
  is as initClosingBehavior,
  os as initCloudStorage,
  as as initHapticFeedback,
  cs as initInitData,
  hs as initInvoice,
  us as initMainButton,
  ls as initMiniApp,
  Is as initNavigator,
  ds as initPopup,
  _s as initQRScanner,
  fs as initSettingsButton,
  gs as initSwipeBehavior,
  ws as initThemeParams,
  ms as initUtils,
  ys as initViewport,
  Ps as initWeb,
  C as invokeCustomMethod,
  ye as isColorDark,
  _e as isIframe,
  ke as isPageReload,
  Q as isRGB,
  ht as isRGBShort,
  zt as isSDKError,
  Rs as isSDKErrorOfType,
  xs as isSSR,
  Cs as isTMA,
  g as json,
  ss as mergeClassNames,
  Ts as mockTelegramEnv,
  y as number,
  B as off,
  w as on,
  ps as parseInitData,
  X as parseLaunchParams,
  De as parseThemeParams,
  A as postEvent,
  d as request,
  xt as requestBiometryInfo,
  bs as requestThemeParams,
  Me as requestViewport,
  vt as retrieveLaunchParams,
  _t as rgb,
  K as searchParams,
  yt as serializeLaunchParams,
  Ie as serializeThemeParams,
  m as setCSSVar,
  Kt as setDebug,
  ts as setTargetOrigin,
  h as string,
  He as subscribe,
  v as supports,
  ct as targetOrigin,
  me as toRGB,
  ae as unsubscribe,
  N as urlToPath,
  be as withTimeout
};
//# sourceMappingURL=index.js.map
